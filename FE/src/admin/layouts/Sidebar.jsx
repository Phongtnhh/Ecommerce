import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import './Sidebar.css';

const Sidebar = ({ isCollapsed, onToggle }) => {
  const location = useLocation();
  
  const menuItems = [
    {
      title: 'Dashboard',
      path: '/admin',
      icon: 'üìä',
      exact: true
    },
    {
      title: 'S·∫£n ph·∫©m',
      icon: 'üì¶',
      children: [
        { title: 'Danh s√°ch s·∫£n ph·∫©m', path: '/admin/products', icon: 'üìã' },
        { title: 'Th√™m s·∫£n ph·∫©m', path: '/admin/products/create', icon: '‚ûï' },
        { title: 'Danh m·ª•c', path: '/admin/categories', icon: 'üè∑Ô∏è' }
      ]
    },
    {
      title: 'ƒê∆°n h√†ng',
      icon: 'üõí',
      children: [
        { title: 'Danh s√°ch ƒë∆°n h√†ng', path: '/admin/orders', icon: 'üìã' },
        { title: 'ƒê∆°n h√†ng ch·ªù x·ª≠ l√Ω', path: '/admin/orders/pending', icon: '‚è≥' },
        { title: 'ƒê∆°n h√†ng ƒë√£ giao', path: '/admin/orders/delivered', icon: '‚úÖ' }
      ]
    },
    {
      title: 'Kh√°ch h√†ng',
      icon: 'üë•',
      children: [
        { title: 'Danh s√°ch kh√°ch h√†ng', path: '/admin/customers', icon: 'üìã' },
        { title: 'Kh√°ch h√†ng VIP', path: '/admin/customers/vip', icon: '‚≠ê' }
      ]
    },
    {
      title: 'B√°o c√°o',
      icon: 'üìà',
      children: [
        { title: 'Doanh thu', path: '/admin/reports/revenue', icon: 'üí∞' },
        { title: 'S·∫£n ph·∫©m b√°n ch·∫°y', path: '/admin/reports/bestsellers', icon: 'üî•' },
        { title: 'Th·ªëng k√™ kh√°ch h√†ng', path: '/admin/reports/customers', icon: 'üë§' }
      ]
    },
    {
      title: 'C√†i ƒë·∫∑t',
      icon: '‚öôÔ∏è',
      children: [
        { title: 'C√†i ƒë·∫∑t chung', path: '/admin/settings/general', icon: 'üîß' },
        { title: 'Thanh to√°n', path: '/admin/settings/payment', icon: 'üí≥' },
        { title: 'Giao h√†ng', path: '/admin/settings/shipping', icon: 'üöö' }
      ]
    }
  ];

  const [expandedItems, setExpandedItems] = useState({});

  const toggleExpanded = (index) => {
    setExpandedItems(prev => ({
      ...prev,
      [index]: !prev[index]
    }));
  };

  const isActive = (path, exact = false) => {
    if (exact) {
      return location.pathname === path;
    }
    return location.pathname.startsWith(path);
  };

  const renderMenuItem = (item, index) => {
    if (item.children) {
      const isExpanded = expandedItems[index];
      const hasActiveChild = item.children.some(child => isActive(child.path));
      
      return (
        <li key={index} className="menu-item has-children">
          <button
            className={`menu-link ${hasActiveChild ? 'active' : ''}`}
            onClick={() => toggleExpanded(index)}
          >
            <span className="menu-icon">{item.icon}</span>
            {!isCollapsed && (
              <>
                <span className="menu-text">{item.title}</span>
                <span className={`expand-icon ${isExpanded ? 'expanded' : ''}`}>
                  ‚ñº
                </span>
              </>
            )}
          </button>
          {!isCollapsed && (
            <ul className={`submenu ${isExpanded ? 'expanded' : ''}`}>
              {item.children.map((child, childIndex) => (
                <li key={childIndex} className="submenu-item">
                  <Link
                    to={child.path}
                    className={`submenu-link ${isActive(child.path) ? 'active' : ''}`}
                  >
                    <span className="submenu-icon">{child.icon}</span>
                    <span className="submenu-text">{child.title}</span>
                  </Link>
                </li>
              ))}
            </ul>
          )}
        </li>
      );
    }

    return (
      <li key={index} className="menu-item">
        <Link
          to={item.path}
          className={`menu-link ${isActive(item.path, item.exact) ? 'active' : ''}`}
        >
          <span className="menu-icon">{item.icon}</span>
          {!isCollapsed && <span className="menu-text">{item.title}</span>}
        </Link>
      </li>
    );
  };

  return (
    <aside className={`sidebar ${isCollapsed ? 'collapsed' : ''}`}>
      <div className="sidebar-header">
        <div className="logo">
          <span className="logo-icon">üõçÔ∏è</span>
          {!isCollapsed && <span className="logo-text">Admin Panel</span>}
        </div>
        <button className="toggle-btn" onClick={onToggle}>
          {isCollapsed ? '‚ñ∂Ô∏è' : '‚óÄÔ∏è'}
        </button>
      </div>
      
      <nav className="sidebar-nav">
        <ul className="menu-list">
          {menuItems.map((item, index) => renderMenuItem(item, index))}
        </ul>
      </nav>
      
      <div className="sidebar-footer">
        <div className="user-info">
          <div className="user-avatar">üë§</div>
          {!isCollapsed && (
            <div className="user-details">
              <div className="user-name">Admin User</div>
              <div className="user-role">Qu·∫£n tr·ªã vi√™n</div>
            </div>
          )}
        </div>
      </div>
    </aside>
  );
};

export default Sidebar;
